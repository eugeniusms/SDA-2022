// CEK OUTPUT PELANGGAN YANG DILAYANI SUDAH BENAR ATAU BELUM
// A = 1

// RESULT BENAR: L: [1][1]

1
10000 A
2
A A
1
1
1
1
1 - 10000
4
P 1 1
L
P 1 1
L

// RESULT BENAR: L: [1][2][3][1][2][3][1][2][3]

3
10000 S
10000 G
10000 A
9
S S G A G S A A G
3
1
1
3
1 - 90000
2 - 90000
3 - 90000
18
P 1 1
L
P 2 2
L
P 3 3
L
P 1 1
L
P 2 2
L
P 3 3
L
P 1 1
L
P 2 2
L
P 3 3
L

// NTAR SUSUN LAGI TCNYA KALAU DAH SUKSES (BILANG CLEAR DAN HAPUS CATATAN TC SALAH DI BAWAH)
// EH TCNYA MALAH SALAH ANJIR (ANJIR DARI PAGI NYARIIN INI 5 JAM SENDIRI PADAL BENER)
// EDGE CASE LINKEDLIST HANCUR (SOLUSI: JANGAN REMOVE FIRST ELEMEN LANGSUNG)
// SUSUN L YANG MANA ada kondisi pelayanan koki akhir = 2 3 1 2 1 3 2 (sesuai urutan koki, koki1 = 2, koki2 = 3, koki3 = 1, ...)
// RESULT = L = [1][1][1][1][1].. semua 1

1
10 A
7
A A A A A A A
1
1
1
1
1 - 90000
28
P 1 1
P 1 1
L
P 1 1
P 1 1
P 1 1
L
P 1 1
L
P 1 1
P 1 1
L
P 1 1
L
P 1 1
P 1 1
P 1 1
L
P 1 1
P 1 1
L
L
L
L
L
L
L
L

// NTAR SUSUN LAGI TCNYA KALAU DAH SUKSES (BILANG CLEAR DAN HAPUS CATATAN TC SALAH DI BAWAH)
// EH TCNYA MALAH SALAH ANJIR (ANJIR DARI PAGI NYARIIN INI 5 JAM SENDIRI PADAL BENER)
// SATU JENIS KOKI ADA 7 KOKI
// SUSUN L YANG MANA ada kondisi pelayanan koki 2 3 1 2 1 3 2
// RESULT BENAR: 
// MENDAPATI SUSUNAN DI ATAS
1
10 A
7
A A A A A A A
1
1
1
1
1 - 90000
28
P 1 1
P 1 1
L
P 1 1
P 1 1
P 1 1
L
P 1 1
L
P 1 1
P 1 1
L
P 1 1
L
P 1 1
P 1 1
P 1 1
L
P 1 1
P 1 1
L
L
L
L
L
L
L
L
// ACAK-ACAK
